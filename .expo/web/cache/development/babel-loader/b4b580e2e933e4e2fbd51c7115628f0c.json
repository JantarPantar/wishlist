{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nexport default function App(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  function SaveQr(params) {\n    return _regeneratorRuntime.async(function SaveQr$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('http://192.168.1.107:45455/api/wishlist/' + params).then(function (res) {\n              return res.json();\n            }).then(function (json) {\n              return save(json);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function save(data) {\n    var raw, send, old;\n    return _regeneratorRuntime.async(function save$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('@WishList'));\n\n          case 2:\n            raw = _context2.sent;\n\n            if (!raw) {\n              _context2.next = 12;\n              break;\n            }\n\n            send = new Array();\n            old = JSON.parse(raw);\n            send.push(data);\n            console.log(send);\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('@WishList', JSON.stringify(old.concat(send))));\n\n          case 10:\n            _context2.next = 16;\n            break;\n\n          case 12:\n            send = new Array();\n            send.push(data);\n            _context2.next = 16;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('@WishList', JSON.stringify(send)));\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context3.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref2) {\n    var data = _ref2.data;\n    setScanned(true);\n    SaveQr(data);\n    navigation.navigate('Open');\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, null, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, null, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: StyleSheet.absoluteFillObject\n  }), scanned && React.createElement(Button, {\n    title: 'Tap to Scan Again',\n    onPress: function onPress() {\n      return setScanned(false);\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/Norbert PC/Desktop/WishList/wishlist/Screens/ScanQrCode.tsx"],"names":["React","useState","useEffect","BarCodeScanner","AsyncStorage","App","navigation","hasPermission","setHasPermission","scanned","setScanned","SaveQr","params","fetch","then","res","json","save","data","getItem","raw","send","Array","old","JSON","parse","push","console","log","setItem","stringify","concat","requestPermissionsAsync","status","handleBarCodeScanned","navigate","styles","container","undefined","StyleSheet","absoluteFillObject","create","flex","flexDirection","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Text, View, StyleSheet, Button } from 'react-native';\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n\r\nexport default function App({navigation}) {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [scanned, setScanned] = useState(false);\r\n\r\n  async function SaveQr(params:any) {\r\n    await fetch('http://192.168.1.107:45455/api/wishlist/'+params).then((res)=>res.json()).then((json=>save(json)));\r\n  }\r\n\r\n  async function save(data:any){\r\n    var raw = await AsyncStorage.getItem('@WishList');\r\n    if(raw){\r\n      var send = new Array();\r\n      var old = JSON.parse(raw)\r\n      send.push(data);\r\n      console.log(send);\r\n      await AsyncStorage.setItem('@WishList',JSON.stringify(old.concat(send)));\r\n    }\r\n    else{\r\n      var send = new Array();\r\n      send.push(data);\r\n      await AsyncStorage.setItem('@WishList',JSON.stringify(send) );\r\n    }\r\n  } \r\n\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n      setHasPermission(status === 'granted');\r\n    })();\r\n  }, []);\r\n\r\n  const handleBarCodeScanned = ({data }) => {\r\n    setScanned(true);\r\n    SaveQr(data);\r\n    navigation.navigate('Open')\r\n  };\r\n\r\n  if (hasPermission === null) {\r\n    return <Text>Requesting for camera permission</Text>;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <BarCodeScanner\r\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\r\n        style={StyleSheet.absoluteFillObject}\r\n      />\r\n      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}